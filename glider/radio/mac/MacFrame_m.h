//
// Generated file, do not edit! Created by nedtool 4.6 from glider/radio/mac/MacFrame.msg.
//

#ifndef _MACFRAME_M_H_
#define _MACFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "glider/radio/mac/mac_types.h"
// }}

/**
 * Class generated from <tt>glider/radio/mac/MacFrame.msg:29</tt> by nedtool.
 * <pre>
 * packet MacFrame
 * {
 *     // type of the MAC frame
 *     mac_types::frame_type frame_type;
 * 
 *     // keys for the frame control field
 *     bool securityEnabled;
 *     bool framePending;
 *     bool ackRequest;
 *     bool panIdCompression;
 *     mac_types::addressing_mode dest_addressing_mode;
 *     int frameVersion;
 *     mac_types::addressing_mode source_addressing_mode;
 * 
 *     // keys for the superframe specification field
 *     short beaconOrder;
 *     short superframeOrder;
 *     short finalCapSlot;
 *     bool batteryLifeExtension;
 *     bool panCoordinator;
 *     bool associationPermit;
 * 
 *     // key for the sequence number
 *     short sequenceNumber;
 * 
 *     // keys for the addressing field
 *     short destPan;
 *     long destAddr;
 *     short srcPan;
 *     long srcAddr;
 * 
 *     // keys for the auxiliary security header
 *     short securityLevel;
 *     short keyIdentifierMode;
 * 
 *     // key for the checksum
 *     int fcs;
 * 
 *     // keys for the command frame payload
 *     mac_types::command_frame_identifier commandFrameIdentifier;
 * 
 *     // association request keys
 *     bool deviceType;
 *     bool powerSource;
 *     bool receiverOnWhenIdle;
 *     bool securityCapability;
 *     bool allocateAddress;
 * 
 *     // association response keys
 *     short allocatedAddress;
 *     short associationStatus;
 * }
 * </pre>
 */
class MacFrame : public ::cPacket
{
  protected:
    frame_type frame_type_var;
    bool securityEnabled_var;
    bool framePending_var;
    bool ackRequest_var;
    bool panIdCompression_var;
    addressing_mode dest_addressing_mode_var;
    int frameVersion_var;
    addressing_mode source_addressing_mode_var;
    short beaconOrder_var;
    short superframeOrder_var;
    short finalCapSlot_var;
    bool batteryLifeExtension_var;
    bool panCoordinator_var;
    bool associationPermit_var;
    short sequenceNumber_var;
    short destPan_var;
    long destAddr_var;
    short srcPan_var;
    long srcAddr_var;
    short securityLevel_var;
    short keyIdentifierMode_var;
    int fcs_var;
    command_frame_identifier commandFrameIdentifier_var;
    bool deviceType_var;
    bool powerSource_var;
    bool receiverOnWhenIdle_var;
    bool securityCapability_var;
    bool allocateAddress_var;
    short allocatedAddress_var;
    short associationStatus_var;

  private:
    void copy(const MacFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MacFrame&);

  public:
    MacFrame(const char *name=NULL, int kind=0);
    MacFrame(const MacFrame& other);
    virtual ~MacFrame();
    MacFrame& operator=(const MacFrame& other);
    virtual MacFrame *dup() const {return new MacFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual frame_type& getFrame_type();
    virtual const frame_type& getFrame_type() const {return const_cast<MacFrame*>(this)->getFrame_type();}
    virtual void setFrame_type(const frame_type& frame_type);
    virtual bool getSecurityEnabled() const;
    virtual void setSecurityEnabled(bool securityEnabled);
    virtual bool getFramePending() const;
    virtual void setFramePending(bool framePending);
    virtual bool getAckRequest() const;
    virtual void setAckRequest(bool ackRequest);
    virtual bool getPanIdCompression() const;
    virtual void setPanIdCompression(bool panIdCompression);
    virtual addressing_mode& getDest_addressing_mode();
    virtual const addressing_mode& getDest_addressing_mode() const {return const_cast<MacFrame*>(this)->getDest_addressing_mode();}
    virtual void setDest_addressing_mode(const addressing_mode& dest_addressing_mode);
    virtual int getFrameVersion() const;
    virtual void setFrameVersion(int frameVersion);
    virtual addressing_mode& getSource_addressing_mode();
    virtual const addressing_mode& getSource_addressing_mode() const {return const_cast<MacFrame*>(this)->getSource_addressing_mode();}
    virtual void setSource_addressing_mode(const addressing_mode& source_addressing_mode);
    virtual short getBeaconOrder() const;
    virtual void setBeaconOrder(short beaconOrder);
    virtual short getSuperframeOrder() const;
    virtual void setSuperframeOrder(short superframeOrder);
    virtual short getFinalCapSlot() const;
    virtual void setFinalCapSlot(short finalCapSlot);
    virtual bool getBatteryLifeExtension() const;
    virtual void setBatteryLifeExtension(bool batteryLifeExtension);
    virtual bool getPanCoordinator() const;
    virtual void setPanCoordinator(bool panCoordinator);
    virtual bool getAssociationPermit() const;
    virtual void setAssociationPermit(bool associationPermit);
    virtual short getSequenceNumber() const;
    virtual void setSequenceNumber(short sequenceNumber);
    virtual short getDestPan() const;
    virtual void setDestPan(short destPan);
    virtual long getDestAddr() const;
    virtual void setDestAddr(long destAddr);
    virtual short getSrcPan() const;
    virtual void setSrcPan(short srcPan);
    virtual long getSrcAddr() const;
    virtual void setSrcAddr(long srcAddr);
    virtual short getSecurityLevel() const;
    virtual void setSecurityLevel(short securityLevel);
    virtual short getKeyIdentifierMode() const;
    virtual void setKeyIdentifierMode(short keyIdentifierMode);
    virtual int getFcs() const;
    virtual void setFcs(int fcs);
    virtual command_frame_identifier& getCommandFrameIdentifier();
    virtual const command_frame_identifier& getCommandFrameIdentifier() const {return const_cast<MacFrame*>(this)->getCommandFrameIdentifier();}
    virtual void setCommandFrameIdentifier(const command_frame_identifier& commandFrameIdentifier);
    virtual bool getDeviceType() const;
    virtual void setDeviceType(bool deviceType);
    virtual bool getPowerSource() const;
    virtual void setPowerSource(bool powerSource);
    virtual bool getReceiverOnWhenIdle() const;
    virtual void setReceiverOnWhenIdle(bool receiverOnWhenIdle);
    virtual bool getSecurityCapability() const;
    virtual void setSecurityCapability(bool securityCapability);
    virtual bool getAllocateAddress() const;
    virtual void setAllocateAddress(bool allocateAddress);
    virtual short getAllocatedAddress() const;
    virtual void setAllocatedAddress(short allocatedAddress);
    virtual short getAssociationStatus() const;
    virtual void setAssociationStatus(short associationStatus);
};

inline void doPacking(cCommBuffer *b, MacFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MacFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef _MACFRAME_M_H_

