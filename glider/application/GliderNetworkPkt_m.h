//
// Generated file, do not edit! Created by nedtool 4.6 from glider/application/GliderNetworkPkt.msg.
//

#ifndef _GLIDERNETWORKPKT_M_H_
#define _GLIDERNETWORKPKT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "base/utils/SimpleAddress.h"
// }}

/**
 * Class generated from <tt>glider/application/GliderNetworkPkt.msg:31</tt> by nedtool.
 * <pre>
 * packet GliderNetworkPkt
 * {
 *     LAddress::L3Type destAddr; // destination network address
 *     LAddress::L3Type srcAddr;  // source network address
 * 
 * }
 * </pre>
 */
class GliderNetworkPkt : public ::cPacket
{
  protected:
    LAddress::L3Type destAddr_var;
    LAddress::L3Type srcAddr_var;

  private:
    void copy(const GliderNetworkPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GliderNetworkPkt&);

  public:
    GliderNetworkPkt(const char *name=NULL, int kind=0);
    GliderNetworkPkt(const GliderNetworkPkt& other);
    virtual ~GliderNetworkPkt();
    GliderNetworkPkt& operator=(const GliderNetworkPkt& other);
    virtual GliderNetworkPkt *dup() const {return new GliderNetworkPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual LAddress::L3Type& getDestAddr();
    virtual const LAddress::L3Type& getDestAddr() const {return const_cast<GliderNetworkPkt*>(this)->getDestAddr();}
    virtual void setDestAddr(const LAddress::L3Type& destAddr);
    virtual LAddress::L3Type& getSrcAddr();
    virtual const LAddress::L3Type& getSrcAddr() const {return const_cast<GliderNetworkPkt*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const LAddress::L3Type& srcAddr);
};

inline void doPacking(cCommBuffer *b, GliderNetworkPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GliderNetworkPkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GLIDERNETWORKPKT_M_H_

